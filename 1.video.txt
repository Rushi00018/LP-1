If you want to connect an IR sensor to an Arduino without a breadboard and use an LED to indicate the sensor's state, here's how you can do it directly, without needing a resistor (though a resistor is usually recommended for the LED to limit current and avoid damage to the LED or Arduino).

Components Needed:
Arduino board (e.g., Uno, Nano)
IR sensor (e.g., TSOP1838 or similar)
LED
Jumper wires
Pinout of the IR Sensor (e.g., TSOP1838):
VCC: Power supply (typically 5V)
GND: Ground
OUT: Output signal (Digital)
Pinout of the LED:
Anode (+): Positive side (longer leg)
Cathode (-): Negative side (shorter leg)
Circuit Connections:
IR Sensor:

VCC of the IR sensor to 5V on the Arduino
GND of the IR sensor to GND on the Arduino
OUT of the IR sensor to Digital Pin 2 on the Arduino
LED:

Anode (positive) of the LED to Digital Pin 13 on the Arduino
Cathode (negative) of the LED to GND on the Arduino
Circuit Setup:
Directly connect the IR sensor to the Arduino using jumper wires.
Directly connect the LED to Digital Pin 13 on the Arduino and to GND.
Code to Control the LED Based on IR Sensor Output:
cpp
Copy code
int irPin = 2;  // IR sensor input pin
int ledPin = 13; // LED output pin
int irValue = 0;

void setup() {
  pinMode(irPin, INPUT);    // Set the IR sensor pin as input
  pinMode(ledPin, OUTPUT);  // Set the LED pin as output
  Serial.begin(9600);       // Initialize serial communication
}

void loop() {
  irValue = digitalRead(irPin);  // Read the output from the IR sensor

  if (irValue == HIGH) {         // If IR sensor detects a signal (IR light)
    digitalWrite(ledPin, HIGH);  // Turn ON the LED
  } else {
    digitalWrite(ledPin, LOW);   // Turn OFF the LED
  }

  delay(100);  // Short delay
}
Explanation:
IR Sensor (TSOP1838): When the sensor detects infrared light (such as from a remote control), it outputs a HIGH signal (5V). When there's no signal, it outputs a LOW signal (0V).
LED: The LED is connected to Pin 13 and will turn ON when the IR sensor detects a signal, and OFF when it does not.
Important Notes:
In this example, we're not using a resistor for the LED because the Arduino's pin 13 has a built-in current-limiting resistor (so you can directly connect the LED). However, if you're using other pins, adding a current-limiting resistor (typically 220Ω or 330Ω) is necessary to protect the LED and the Arduino pin from excessive current.
Ensure that the IR sensor and Arduino share a common ground connection.