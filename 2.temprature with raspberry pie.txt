1. Gather the Components
You will need the following components:

-Raspberry Pi (any model with GPIO pins, e.g., Raspberry Pi 3/4)
-DHT11 sensor
-10kΩ resistor (for pull-up configuration with the sensor)
-Breadboard
-Jumper wires
-LED (for alert)
-220Ω resistor (for LED current limiting)

2. Connect the DHT11 Sensor to the Raspberry Pi
The DHT11 sensor has 4 pins:

VCC: Power supply pin (3.3V)
GND: Ground pin
DATA: Data pin to read the temperature
NC: Not connected (optional)

Wiring the DHT11 to Raspberry Pi:
VCC (DHT11) → 3.3V (Pin 1 on Raspberry Pi) (Power supply)
GND (DHT11) → GND (Pin 6 on Raspberry Pi) (Ground)
DATA (DHT11) → GPIO4 (Pin 7 on Raspberry Pi) (Data pin for reading temperature)
Place a 10kΩ pull-up resistor between the DATA pin and the VCC pin of the DHT11 sensor. This will stabilize the data signal.
3. Connect the LED for Alerts
Wiring the LED:
Anode (long leg) of the LED → GPIO17 (Pin 11 on Raspberry Pi)
Cathode (short leg) of the LED → GND (Pin 6 on Raspberry Pi) through a 220Ω resistor.
4. Install Necessary Libraries
We will use the Adafruit_DHT library to interact with the DHT11 sensor and RPi.GPIO to control the GPIO pins for the LED.

Open a terminal on your Raspberry Pi and run the following commands:

bash
Copy code-

sudo apt-get update
sudo apt-get install python3-pip
pip3 install Adafruit_DHT RPi.GPIO


5. Write the Python Code
Create a Python script to read the temperature from the DHT11 sensor and control the LED.

Open the terminal and create a new Python file:

bash
Copy code-

nano temperature_alert.py

Copy and paste the following Python code into the file:

python
Copy code
import Adafruit_DHT
import RPi.GPIO as GPIO
import time

# Set the sensor type (DHT11 or DHT22)
sensor = Adafruit_DHT.DHT11  # Use DHT22 for better accuracy

# Pin connected to the data pin of the DHT11 sensor
sensor_pin = 4  # GPIO4 (Pin 7)

# Set up the GPIO pin for the LED
LED_PIN = 17  # GPIO17 (Pin 11)

# Set up the GPIO mode
GPIO.setmode(GPIO.BCM)
GPIO.setup(LED_PIN, GPIO.OUT)

# Threshold temperature for alert (in Celsius)
threshold_temp = 30

def read_temperature():
    # Read the humidity and temperature from the DHT11 sensor
    humidity, temperature = Adafruit_DHT.read_retry(sensor, sensor_pin)
    
    # Check if the reading was successful
    if temperature is not None:
        print(f"Temperature: {temperature:.1f}C")
        return temperature
    else:
        print("Failed to retrieve data from the sensor")
        return None

def alert_if_needed(temp):
    # Check if the temperature exceeds the threshold
    if temp is not None and temp > threshold_temp:
        GPIO.output(LED_PIN, GPIO.HIGH)  # Turn on LED
        print("Alert! Temperature has crossed the threshold!")
    else:
        GPIO.output(LED_PIN, GPIO.LOW)  # Turn off LED

try:
    while True:
        # Read the temperature from the DHT11 sensor
        current_temp = read_temperature()
        
        # Trigger alert if temperature exceeds threshold
        alert_if_needed(current_temp)
        
        # Wait for a short time before reading again
        time.sleep(2)

except KeyboardInterrupt:
    print("Program stopped by user.")
    GPIO.cleanup()  # Clean up the GPIO settings on exit
Save the file and exit the editor (in nano, press CTRL+X, then Y, and Enter).
6. Run the Program
To run the Python script:

In the terminal, run:

bash
Copy code
python3 temperature_alert.py
The program will continuously read the temperature every 2 seconds. If the temperature exceeds the threshold (e.g., 30°C), the LED will light up as an alert.

If you want to stop the program, press Ctrl+C.

7. Test the Setup
You should now see the current temperature readings printed in the terminal.
If the temperature exceeds the threshold (30°C), the LED will turn on.
If the temperature drops below the threshold, the LED will turn off.
8. (Optional) Adjust the Threshold
If you want to adjust the temperature threshold, simply modify the threshold_temp variable in the code. For example, if you want the alert to trigger at 25°C, change the line:

python
Copy code
threshold_temp = 30
to:

python
Copy code
threshold_temp = 25
Conclusion
You have successfully connected the DHT11 temperature sensor to your Raspberry Pi, written a Python script to read the temperature, and set up an LED alert system that activates when the temperature exceeds the specified threshold. You can now use this system for temperature monitoring and alerts.